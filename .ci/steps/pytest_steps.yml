parameters:
  conda: #
  azureSubscription: #
  azure_subscription: #
  azureresourcegroup: #
  workspacename: defaultworkspacename
  azureregion: #
  location: #
  pylint_fail: True
  set_vars: true

steps:
- task: AzureCLI@1
  displayName: "Set Vars"
  condition: eq('${{ parameters.set_vars }}', true)
  inputs:
    azureSubscription: ${{parameters.azureSubscription}}
    scriptLocation: 'inlineScript'
    failOnStderr: True
    inlineScript: |
      source activate ${{parameters.conda}}

      rm -f workspace_conf.yml
      
      echo "subscription_id:  ${{parameters.azure_subscription}}" >> workspace_conf.yml
      echo "resource_group:  ${{parameters.azureresourcegroup}}" >> workspace_conf.yml
      echo "workspace_name:  ${{parameters.workspacename}}" >> workspace_conf.yml
      echo "workspace_region:  ${{parameters.azureregion}}" >> workspace_conf.yml
      
      mv workspace_conf.yml ../

- task: AzureCLI@1
  displayName: "pytests - tests"
  inputs:
    azureSubscription: ${{parameters.azureSubscription}}
    scriptLocation: 'inlineScript'
    failOnStderr: True
    inlineScript: |
      source activate ${{parameters.conda}}
    
      # --nunit-xml=test-nunitresults.xml
      pytest tests --doctest-modules --cov=. --cov-report=xml

- task: AzureCLI@1
  displayName: "PyLint"
  condition: succeededOrFailed()
  inputs:
    azureSubscription: ${{parameters.azureSubscription}}
    scriptLocation: 'inlineScript'
    failOnStderr: ${{parameters.pylint_fail}}
    inlineScript: |
      source activate ${{parameters.conda}}

      if [ -d "notebooks" ]; then
        jupyter nbconvert --to python notebooks/0*.ipynb
      
        pylint --output-format=junit notebooks/0*.py >> test-pylint-results.xml
        pylint notebooks/0*.py
      fi

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: NUnit
    testResultsFiles: '**/test-nunitresults.xml'
    failTaskOnFailedTests: true

- task: PublishTestResults@2
  displayName: 'Publish Test Results **/test-*.xml'
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: '**/test-*.xml'
    failTaskOnFailedTests: true

- task: PublishCodeCoverageResults@1
  condition: succeededOrFailed()
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
